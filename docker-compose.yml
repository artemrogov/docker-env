version: "3.7"

services:


 nginx:
    image: nginx:1.19.8-alpine
    container_name: nginx
    restart: unless-stopped
    links:
      - api_backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/:/etc/nginx/conf.d/
    networks:
      - gstd2_network

 api_backend:
    build:
      args:
         user: ${USER}
         uid: 1000
      context: ./api_backend
      dockerfile: Dockerfile
    container_name: api_backend
    links:
       - master_db
    ports:
      - 9000:9000
    restart: unless-stopped
    working_dir: /var/www/html/
    tty: true
    volumes:
      - ./api_backend/src/:/var/www/html/
    networks:
     - gstd2_network


 auth_service:
    build:
      args:
         user: ${USER}
         uid: 1000
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    links:
       - test_db
    ports:
      - 9001:9001
    restart: unless-stopped
    working_dir: /var/www/html/
    tty: true
    volumes:
      - ./auth_service/service:/var/www/html/service
    networks:
     - gstd2_network    
     
 cache_service:
  image: redis:latest 
  container_name: cache_service
  tty: true
  restart: unless-stopped
  command: redis-server --requirepass $CACHE_SERVER_PASSWORD
  ports:
    - "6379:6379"
  volumes:
    - cache_redis_data:/var/lib/redis
  networks:
    - gstd2_network


 master_db:
    image: postgres:12.5-alpine
    restart: unless-stopped
    container_name: master_db
    tty: true
    environment:
        POSTGRES_DB: $DB_USERNAME
        POSTGRES_USER: $DB_NAME
        POSTGRES_PASSWORD: $DB_PASSWORD
    ports:
      - 5432:5432
    volumes:
     - master_data:/var/lib/postgresql/data/
    networks:
      - gstd2_network
      
 test_db:
    image: postgres:12.5-alpine
    restart: unless-stopped
    container_name: test_db
    tty: true
    environment:
        POSTGRES_DB: $DBTEST_USERNAME
        POSTGRES_USER: $DBTEST_NAME
        POSTGRES_PASSWORD: $DBTEST_PASSWORD
    ports:
      - 5433:5432
    volumes:
     - test_data:/var/lib/postgresql/data/
    networks:
      - gstd2_network


 nq_db:
    image: postgres:12.5-alpine
    restart: unless-stopped
    container_name: nq_db
    tty: true
    environment:
        POSTGRES_DB: test2
        POSTGRES_USER: test2
        POSTGRES_PASSWORD: test123
    ports:
      - 5434:5432
    volumes:
     - nut_data:/var/lib/postgresql/data/
    networks:
      - gstd2_network
  

 rabbitmq:
    image: docker.io/bitnami/rabbitmq:3.9
    container_name: rabbitmq
    ports:
      - '4369:4369'
      - '5551:5551'
      - '5552:5552'
      - '5672:5672'
      - '25672:25672'
      - '15672:15672'
    environment:
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=test123456
    volumes:
      - 'rabbitmq_data:/bitnami/rabbitmq/mnesia'
    networks:
      - gstd2_network
       

 service_search:
      image: 'bitnami/elasticsearch:7.16.2'
      container_name: service_search
      volumes:
        - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
        - elasticsearch:/usr/share/elasticsearch/data:z
      environment:
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        - "discovery.type=single-node"
      ports:
        - "9200:9200"
      networks:
        - gstd2_network

 kibana:
    image: 'docker.elastic.co/kibana/kibana:7.16.2'
    container_name: kibana
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
    - "5601:5601"
    networks:
    - gstd2_network

 
networks:
  gstd2_network:
    driver: bridge

volumes:
   master_data:
   test_data:
   nut_data: 
   www-html:
   cache_redis_data:
   elasticsearch: 
   rabbitmq_data:
